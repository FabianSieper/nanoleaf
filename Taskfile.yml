version: '3'

tasks:
  new-nanoleaf:
    desc: "Store new Nanoleaf device IP and token in caching file"
    cmds:
      - |
        IP=$(nmap -p 16021 --open 192.168.178.0/24 \
          | grep -m1 'Light-Panels' \
          | sed -n 's/.*(\(.*\)).*/\1/p')
        echo "Found Nanoleaf device at IP: $IP"
        RESPONSE=$(curl -s -X POST http://$IP:16021/api/v1/new)
        if [ -z "$RESPONSE" ]; then
          echo "Error: empty response from device at $IP. Ensure pairing mode is active and try again." >&2
          exit 1
        fi
        echo "Pairing response: $RESPONSE"
        TOKEN=$(echo "$RESPONSE" | jq -r '.auth_token')
        if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then
          echo "Error: failed to retrieve valid token from $IP. Ensure pairing mode is active and try again." >&2
          exit 1
        fi
        NAME=$(gum input --prompt "Enter a name for this Nanoleaf device:")
        echo "Token: $TOKEN"
        FILE=nanoleaf.json
        if [ ! -f "$FILE" ]; then
          echo '[]' > "$FILE"
        fi
        if ! jq -e ".[] | select(.ip==\"$IP\")" "$FILE" >/dev/null; then
          jq ". += [{\"ip\":\"$IP\",\"token\":\"$TOKEN\",\"name\":\"$NAME\"}]" "$FILE" > tmp && mv tmp "$FILE"
          echo "Saved IP and token to $FILE"
          # Cycle power off and on to confirm connectivity
          curl -s -X PUT http://$IP:16021/api/v1/$TOKEN/state \
            -H "Content-Type:application/json" \
            -d '{"on":{"value":false}}'
          sleep 1
          curl -s -X PUT http://$IP:16021/api/v1/$TOKEN/state \
            -H "Content-Type:application/json" \
            -d '{"on":{"value":true}}'
          echo "Cycled power off/on for $IP"
        else
          echo "Entry for IP $IP already exists, skipping append"
        fi
    silent: true

  brightness:
    desc: "Interactive: select a Nanoleaf from nanoleaf.json and set brightness"
    cmds:
      - |
        DEVICE_NAME=$(jq -r '.[].name' nanoleaf.json | gum choose --header="Select Nanoleaf device:")
        DEVICE=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .ip' nanoleaf.json)
        TOKEN=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .token' nanoleaf.json)
        BRIGHTNESS=$(gum input --prompt "Enter brightness (0-100):")
        curl -v -X PUT http://$DEVICE:16021/api/v1/$TOKEN/state \
          -H "Content-Type: application/json" \
          -d "{\"brightness\":{\"value\":$BRIGHTNESS}}"
        echo "Set brightness of $DEVICE to $BRIGHTNESS"
    silent: true

  power-toggle:
    desc: "Interactive: select a Nanoleaf from nanoleaf.json and turn it ON or OFF"
    cmds:
      - |
        DEVICE_NAME=$(jq -r '.[].name' nanoleaf.json | gum choose --header="Select Nanoleaf device:")
        DEVICE=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .ip' nanoleaf.json)
        TOKEN=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .token' nanoleaf.json)
        ACTION=$(gum choose on off --header="Select action:")
        if [ "$ACTION" = "on" ]; then
          VALUE=true
        else
          VALUE=false
        fi
        curl -s -X PUT http://$DEVICE:16021/api/v1/$TOKEN/state \
          -H "Content-Type: application/json" \
          -d "{\"on\":{\"value\":$VALUE}}"
        echo "Set $DEVICE to $ACTION"
    silent: true

  install:
    desc: "Install dependencies"
    cmds:
      - |
        brew install nmap jq gum

  info:
    desc: "Fetch and display full device info"
    cmds:
      - |
        DEVICE_NAME=$(jq -r '.[].name' nanoleaf.json | gum choose --header="Select Nanoleaf device:")
        DEVICE=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .ip' nanoleaf.json)
        TOKEN=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .token' nanoleaf.json)
        curl -s http://$DEVICE:16021/api/v1/$TOKEN/ | jq
    silent: true

  identify:
    desc: "Trigger identify on selected device"
    cmds:
      - |
        DEVICE_NAME=$(jq -r '.[].name' nanoleaf.json | gum choose --header="Select device:")
        DEVICE=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .ip' nanoleaf.json)
        TOKEN=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .token' nanoleaf.json)
        curl -s -X PUT http://$DEVICE:16021/api/v1/$TOKEN/identify
        echo "Identifying $DEVICE_NAME"
    silent: true

  set-effect:
    desc: "Select a device, list available effects, and apply selected effect"
    cmds:
      - |
        DEVICE_NAME=$(jq -r '.[].name' nanoleaf.json | gum choose --header="Select device:")
        DEVICE=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .ip' nanoleaf.json)
        TOKEN=$(jq -r --arg name "$DEVICE_NAME" '.[] | select(.name==$name) | .token' nanoleaf.json)
        EFFECT=$(curl -s http://$DEVICE:16021/api/v1/$TOKEN/effects/effectsList | jq -r '.[]' | gum choose --header="Select effect:")
        curl -s -X PUT http://$DEVICE:16021/api/v1/$TOKEN/effects \
          -H "Content-Type: application/json" \
          -d "{\"select\":\"$EFFECT\"}"
        echo "Applied effect '$EFFECT' to $DEVICE_NAME"
    silent: true